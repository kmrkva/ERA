<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>v0.dev Screenshot to HTML Generator</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 16px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: #1a1a1a;
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2rem;
            margin-bottom: 10px;
        }

        .header p {
            opacity: 0.8;
            font-size: 1.1rem;
        }

        .upload-section {
            padding: 40px;
        }

        .upload-area {
            border: 3px dashed #ddd;
            border-radius: 12px;
            padding: 60px 20px;
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
            background: #fafafa;
        }

        .upload-area:hover {
            border-color: #667eea;
            background: #f0f4ff;
        }

        .upload-area.dragover {
            border-color: #667eea;
            background: #f0f4ff;
            transform: scale(1.02);
        }

        .upload-icon {
            font-size: 3rem;
            margin-bottom: 20px;
            color: #667eea;
        }

        .upload-text {
            font-size: 1.2rem;
            color: #666;
            margin-bottom: 10px;
        }

        .upload-subtext {
            color: #999;
            font-size: 0.9rem;
        }

        #fileInput {
            display: none;
        }

        .preview-section {
            padding: 0 40px;
            display: none;
        }

        .preview-image {
            max-width: 100%;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }

        .generate-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 8px;
            font-size: 1.1rem;
            cursor: pointer;
            transition: transform 0.2s ease;
            width: 100%;
            margin-bottom: 20px;
        }

        .generate-btn:hover {
            transform: translateY(-2px);
        }

        .generate-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 20px;
        }

        .loading-spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 15px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .results-section {
            padding: 40px;
            display: none;
            border-top: 1px solid #eee;
        }

        .results-title {
            font-size: 1.5rem;
            margin-bottom: 20px;
            color: #333;
        }

        .response-container {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            border-left: 4px solid #667eea;
        }

        .response-title {
            font-size: 1rem;
            font-weight: 600;
            color: #333;
            margin-bottom: 10px;
        }

        .response-content {
            color: #666;
            font-size: 0.9rem;
            line-height: 1.5;
        }

        .code-container {
            background: #1a1a1a;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            position: relative;
        }

        .code-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .code-title {
            color: #fff;
            font-size: 0.9rem;
            font-weight: 600;
        }

        .code-actions {
            display: flex;
            gap: 8px;
        }

        .copy-btn, .download-btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            font-size: 0.8rem;
            cursor: pointer;
            transition: background 0.2s ease;
        }

        .copy-btn:hover, .download-btn:hover {
            background: #5a6fd8;
        }

        .download-btn {
            background: #28a745;
        }

        .download-btn:hover {
            background: #218838;
        }

        .code-content {
            background: #2d2d2d;
            color: #f8f8f2;
            padding: 15px;
            border-radius: 4px;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 0.85rem;
            line-height: 1.5;
            overflow-x: auto;
            white-space: pre-wrap;
            word-wrap: break-word;
            max-height: 400px;
            overflow-y: auto;
        }

        .error {
            background: #fee;
            color: #c33;
            padding: 15px;
            border-radius: 8px;
            margin-top: 20px;
            border-left: 4px solid #c33;
        }

        .success {
            background: #efe;
            color: #363;
            padding: 15px;
            border-radius: 8px;
            margin-top: 20px;
            border-left: 4px solid #363;
        }

        .reset-btn {
            background: #6c757d;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 6px;
            cursor: pointer;
            margin-top: 20px;
        }

        .reset-btn:hover {
            background: #5a6268;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>v0.dev Screenshot to HTML</h1>
            <p>Upload a screenshot and generate HTML code using AI</p>
        </div>

        <div class="upload-section">
            <div class="upload-area" id="uploadArea">
                <div class="upload-icon">ðŸ“·</div>
                <div class="upload-text">Drop your screenshot here or click to browse</div>
                <div class="upload-subtext">Supports PNG, JPG, GIF (max 10MB)</div>
            </div>
            <input type="file" id="fileInput" accept="image/*">
        </div>

        <div class="preview-section" id="previewSection">
            <img id="previewImage" class="preview-image" alt="Preview">
            <button class="generate-btn" id="generateBtn">Generate HTML with v0.dev</button>
        </div>

        <div class="loading" id="loading">
            <div class="loading-spinner"></div>
            <p>Generating HTML with AI... This may take a moment.</p>
        </div>

        <div class="results-section" id="resultsSection">
            <h2 class="results-title">Generated HTML Code</h2>
            
            <div class="response-container" id="responseContainer" style="display: none;">
                <div class="response-title">AI Response</div>
                <div class="response-content" id="responseContent"></div>
            </div>

            <div class="code-container">
                <div class="code-header">
                    <span class="code-title">HTML Output</span>
                    <div class="code-actions">
                        <button class="copy-btn" id="copyBtn">Copy Code</button>
                        <button class="download-btn" id="downloadBtn">Download HTML</button>
                    </div>
                </div>
                <div class="code-content" id="codeContent"></div>
            </div>
            <button class="reset-btn" id="resetBtn">Generate Another</button>
        </div>
    </div>

    <script>
        const uploadArea = document.getElementById('uploadArea');
        const fileInput = document.getElementById('fileInput');
        const previewSection = document.getElementById('previewSection');
        const previewImage = document.getElementById('previewImage');
        const generateBtn = document.getElementById('generateBtn');
        const loading = document.getElementById('loading');
        const resultsSection = document.getElementById('resultsSection');
        const codeContent = document.getElementById('codeContent');
        const copyBtn = document.getElementById('copyBtn');
        const downloadBtn = document.getElementById('downloadBtn');
        const resetBtn = document.getElementById('resetBtn');
        const responseContainer = document.getElementById('responseContainer');
        const responseContent = document.getElementById('responseContent');

        let selectedFile = null;
        let cleanHtmlCode = '';

        // Upload area click handler
        uploadArea.addEventListener('click', () => {
            fileInput.click();
        });

        // Drag and drop handlers
        uploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.classList.add('dragover');
        });

        uploadArea.addEventListener('dragleave', () => {
            uploadArea.classList.remove('dragover');
        });

        uploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadArea.classList.remove('dragover');
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                handleFileSelect(files[0]);
            }
        });

        // File input change handler
        fileInput.addEventListener('change', (e) => {
            if (e.target.files.length > 0) {
                handleFileSelect(e.target.files[0]);
            }
        });

        // Handle file selection
        function handleFileSelect(file) {
            if (!file.type.startsWith('image/')) {
                showError('Please select an image file.');
                return;
            }

            if (file.size > 10 * 1024 * 1024) {
                showError('File size must be less than 10MB.');
                return;
            }

            selectedFile = file;
            
            // Show preview
            const reader = new FileReader();
            reader.onload = (e) => {
                previewImage.src = e.target.result;
                previewSection.style.display = 'block';
                resultsSection.style.display = 'none';
            };
            reader.readAsDataURL(file);
        }

        // Extract clean HTML from response
        function extractCleanHtml(response) {
            // Remove <Thinking> tags and content
            let cleaned = response.replace(/<Thinking>[\s\S]*?<\/Thinking>/gi, '');
            
            // Remove common AI response phrases at the beginning
            cleaned = cleaned.replace(/^[\s\S]*?I'll (recreate|create|build|make)[\s\S]*?(?=<!DOCTYPE)/i, '');
            cleaned = cleaned.replace(/^[\s\S]*?Let me (recreate|create|build|make)[\s\S]*?(?=<!DOCTYPE)/i, '');
            cleaned = cleaned.replace(/^[\s\S]*?Here's[\s\S]*?(?=<!DOCTYPE)/i, '');
            
            // Find the HTML content starting with <!DOCTYPE
            const htmlStart = cleaned.search(/<!DOCTYPE\s+html/i);
            if (htmlStart !== -1) {
                cleaned = cleaned.substring(htmlStart);
            }
            
            // Remove any trailing text after </html>
            const htmlEnd = cleaned.lastIndexOf('</html>');
            if (htmlEnd !== -1) {
                cleaned = cleaned.substring(0, htmlEnd + 7);
            }
            
            return cleaned.trim();
        }

        // Generate HTML
        generateBtn.addEventListener('click', async () => {
            if (!selectedFile) return;

            generateBtn.disabled = true;
            loading.style.display = 'block';
            resultsSection.style.display = 'none';

            const formData = new FormData();
            formData.append('screenshot', selectedFile);
            
            // Add the specific prompt for v0.dev-style generation
            formData.append('prompt', 'Please make a .html webpage that recreates the UI shown in the attached screenshot as accurately as possible');

            try {
                const response = await fetch('/generate', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    const fullResponse = result.text;
                    cleanHtmlCode = extractCleanHtml(fullResponse);
                    
                    // Display the clean HTML code
                    codeContent.textContent = cleanHtmlCode;
                    
                    // Show AI response (optional - can be hidden if not needed)
                    if (fullResponse !== cleanHtmlCode) {
                        const responseText = fullResponse.replace(cleanHtmlCode, '').trim();
                        if (responseText) {
                            responseContent.textContent = responseText;
                            responseContainer.style.display = 'block';
                        }
                    }
                    
                    resultsSection.style.display = 'block';
                    showSuccess('HTML generated successfully!');
                } else {
                    showError(result.error || 'Failed to generate HTML');
                }
            } catch (error) {
                console.error('Error:', error);
                showError('Network error. Please try again.');
            } finally {
                loading.style.display = 'none';
                generateBtn.disabled = false;
            }
        });

        // Copy code to clipboard
        copyBtn.addEventListener('click', async () => {
            try {
                await navigator.clipboard.writeText(cleanHtmlCode);
                copyBtn.textContent = 'Copied!';
                setTimeout(() => {
                    copyBtn.textContent = 'Copy Code';
                }, 2000);
            } catch (error) {
                console.error('Failed to copy:', error);
                showError('Failed to copy to clipboard');
            }
        });

        // Download HTML file
        downloadBtn.addEventListener('click', () => {
            if (!cleanHtmlCode) {
                showError('No HTML code to download');
                return;
            }

            const blob = new Blob([cleanHtmlCode], { type: 'text/html' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'generated-webpage.html';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);

            downloadBtn.textContent = 'Downloaded!';
            setTimeout(() => {
                downloadBtn.textContent = 'Download HTML';
            }, 2000);
        });

        // Reset for another generation
        resetBtn.addEventListener('click', () => {
            selectedFile = null;
            cleanHtmlCode = '';
            fileInput.value = '';
            previewSection.style.display = 'none';
            resultsSection.style.display = 'none';
            responseContainer.style.display = 'none';
            loading.style.display = 'none';
            clearMessages();
        });

        // Utility functions
        function showError(message) {
            clearMessages();
            const error = document.createElement('div');
            error.className = 'error';
            error.textContent = message;
            document.querySelector('.upload-section').appendChild(error);
        }

        function showSuccess(message) {
            clearMessages();
            const success = document.createElement('div');
            success.className = 'success';
            success.textContent = message;
            resultsSection.appendChild(success);
        }

        function clearMessages() {
            document.querySelectorAll('.error, .success').forEach(el => el.remove());
        }
    </script>
</body>
</html>